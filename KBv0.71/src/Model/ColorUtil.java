package Model;

import java.awt.Color;

/**
 * 
 * @author Kirurgisk brits
 * @Date 2013-02-20
 * A helper class to get a java.awt.Color object depending on the value 
 * between 0 - 100. The colors are are divided in two methods 
 * warm colors and cold colors.
 */
public class ColorUtil {
	
	
	  
	  /**
	   * Returns n-dimensional array of colors for given nx3 integer array of RGB values. 
	   */
	  public static Color[] getColorScale(int[][] rgb) {
	    if (rgb == null)
	      return null;
	    Color[] clr = new Color[rgb.length];
	    for (int i = 0; i < rgb.length; i++) {
	      float[] hsb =  Color.RGBtoHSB(rgb[i][0], rgb[i][1], rgb[i][2], null);
	      clr[i] = Color.getHSBColor(hsb[0], hsb[1], hsb[2]);
	    }
	    return clr;
	  }
	
	  /**
	   * Get a color from a scale of 100 colors, in a range from
	   * medium green to dark blue  
	   * 
	   * @param i value from sensor 
	   * @return a Color from the java.awt.color
	   */
	  public static Color GtoBColor(int i) {
		  int[][] rgb = {
		  {0,255,4},
		  {0,255,9},
		  {0,255,14},
		  {0,255,19},
		  {0,255,24},
		  {0,255,29},
		  {0,255,34},
		  {0,255,39},
		  {0,255,44},
		  {0,255,49},
		  {0,255,54},
		  {0,255,59},
		  {0,255,64},
		  {0,255,69},
		  {0,255,74},
		  {0,255,79},
		  {0,255,84},
		  {0,255,89},
		  {0,255,94},
		  {0,255,99},
		  {0,255,104},
		  {0,255,109},
		  {0,255,114},
		  {0,255,119},
		  {0,255,124},
		  {0,255,129},
		  {0,255,134},
		  {0,255,139},
		  {0,255,144},
		  {0,255,149},
		  {0,255,154},
		  {0,255,159},
		  {0,255,164},
		  {0,255,169},
		  {0,255,174},
		  {0,255,179},
		  {0,255,184},
		  {0,255,189},
		  {0,255,194},
		  {0,255,199},
		  {0,255,204},
		  {0,255,209},
		  {0,255,214},
		  {0,255,219},
		  {0,255,224},
		  {0,255,229},
		  {0,255,234},
		  {0,255,239},
		  {0,255,244},
		  {0,255,249},
		  {0,255,254},
		  {0,255,255},
		  {0,251,255},
		  {0,246,255},
		  {0,241,255},
		  {0,236,255},
		  {0,231,255},
		  {0,226,255},
		  {0,221,255},
		  {0,216,255},
		  {0,211,255},
		  {0,206,255},
		  {0,201,255},
		  {0,196,255},
		  {0,191,255},
		  {0,186,255},
		  {0,181,255},
		  {0,176,255},
		  {0,171,255},
		  {0,166,255},
		  {0,161,255},
		  {0,156,255},
		  {0,151,255},
		  {0,146,255},
		  {0,141,255},
		  {0,136,255},
		  {0,131,255},
		  {0,126,255},
		  {0,121,255},
		  {0,116,255},
		  {0,111,255},
		  {0,106,255},
		  {0,101,255},
		  {0,96,255},
		  {0,91,255},
		  {0,86,255},
		  {0,81,255},
		  {0,76,255},
		  {0,71,255},
		  {0,66,255},
		  {0,61,255},
		  {0,56,255},
		  {0,51,255},
		  {0,46,255},
		  {0,41,255},
		  {0,36,255},
		  {0,31,255},
		  {0,26,255},
		  {0,21,255},
		  {0,16,255},
		  {0,11,255},
		  {0,6,255},
		  {0,1,255} };
		  
		    int ii = 0;
		    if (i > 100)
		      ii = 100;
		    else
		      ii = Math.max(i, ii);
		    float[] hsb =  Color.RGBtoHSB(rgb[ii][0], rgb[ii][1], rgb[ii][2], null);
		    return Color.getHSBColor(hsb[0], hsb[1], hsb[2]);
	  }
	  
	  
	  /**
	   * Get a color from a scale of 100 colors, in a range from
	   * medium Green to dark red
	   * 
	   * @param i value from sensor 
	   * @return a Color from the java.awt.color
	   */
	  public static Color GtoRColor(int i) {

		    
    int[][] rgb = {
    		{4,255,0},
    		{9,255,0},
    		{14,255,0},
    		{19,255,0},
    		{24,255,0},
    		{29,255,0},
    		{34,255,0},
    		{39,255,0},
    		{44,255,0},
    		{49,255,0},
    		{54,255,0},
    		{59,255,0},
    		{64,255,0},
    		{69,255,0},
    		{74,255,0},
    		{79,255,0},
    		{84,255,0},
    		{89,255,0},
    		{94,255,0},
    		{99,255,0},
    		{104,255,0},
    		{109,255,0},
    		{114,255,0},
    		{119,255,0},
    		{124,255,0},
    		{129,255,0},
    		{134,255,0},
    		{139,255,0},
    		{144,255,0},
    		{149,255,0},
    		{154,255,0},
    		{159,255,0},
    		{164,255,0},
    		{169,255,0},
    		{174,255,0},
    		{179,255,0},
    		{184,255,0},
    		{189,255,0},
    		{194,255,0},
    		{199,255,0},
    		{204,255,0},
    		{209,255,0},
    		{214,255,0},
    		{219,255,0},
    		{224,255,0},
    		{229,255,0},
    		{234,255,0},
    		{239,255,0},
    		{244,255,0},
    		{249,255,0},
    		{254,255,0},
    		{255,251,0},
    		{255,246,0},
    		{255,241,0},
    		{255,236,0},
    		{255,231,0},
    		{255,226,0},
    		{255,221,0},
    		{255,216,0},
    		{255,211,0},
    		{255,206,0},
    		{255,201,0},
    		{255,196,0},
    		{255,191,0},
    		{255,186,0},
    		{255,181,0},
    		{255,176,0},
    		{255,171,0},
    		{255,166,0},
    		{255,161,0},
    		{255,156,0},
    		{255,151,0},
    		{255,146,0},
    		{255,141,0},
    		{255,136,0},
    		{255,131,0},
    		{255,126,0},
    		{255,121,0},
    		{255,116,0},
    		{255,111,0},
    		{255,106,0},
    		{255,101,0},
    		{255,96,0},
    		{255,91,0},
    		{255,86,0},
    		{255,81,0},
    		{255,76,0},
    		{255,71,0},
    		{255,66,0},
    		{255,61,0},
    		{255,56,0},
    		{255,51,0},
    		{255,46,0},
    		{255,41,0},
    		{255,36,0},
    		{255,31,0},
    		{255,26,0},
    		{255,21,0},
    		{255,16,0},
    		{255,11,0},
    		{255,6,0},
    		{255,0,0}
    };
    
    int ii = 0;
    if (i > 100)
      ii = 100;
    else
      ii = Math.max(i, ii);
    float[] hsb =  Color.RGBtoHSB(rgb[ii][0], rgb[ii][1], rgb[ii][2], null);
    return Color.getHSBColor(hsb[0], hsb[1], hsb[2]);
	  } 
}
